#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

class TwoConvexShapes {
public:
	int countWays(vector <string>);
};

const long long mod = 1000000007LL;
int can[60][61][2];
long long dp[60][61][2],sum[61][2];
vector<string> g;
int n,m;

bool check(int x,int y,char col)
{
    for (int i = 0;i < y;i++)
        if (g[x][i] != '?' && g[x][i] != col)
            return false;
    for (int i = y;i < m;i++)
        if (g[x][i] != '?' && g[x][i] == col)
            return false;
    return true;
}

bool checkc(int x,char col)
{
    for (int i = 0;i < n;i++)
        for (int j = 0;j < x;j++)
            if (g[i][j] != '?' && g[i][j] != col) return false;
    for (int i = 0;i < n;i++)
        for (int j = x;j < m;j++)
            if (g[i][j] != '?' && g[i][j] == col) return false;
    return true;
}

bool checkr(int x,char col)
{
    for (int i = 0;i < x;i++)
        for (int j = 0;j < m;j++)
            if (g[i][j] != '?' && g[i][j] != col) return false;
    for (int i = x;i < n;i++)
        for (int j = 0;j < m;j++)
            if (g[i][j] != '?' && g[i][j] == col) return false;
    return true;
}

int TwoConvexShapes::countWays(vector <string> tg) {
    g = tg;
    n = g.size(),m = g[0].size();
    for (int i = 0;i < n;i++)
        for (int j = 0;j <= m;j++)
        {
            if (check(i,j,'W') == true)
                can[i][j][0] = 1;
            else
                can[i][j][0] = 0;
            if (check(i,j,'B') == true)
                can[i][j][1] = 1;
            else
                can[i][j][1] = 0;
        }

    bool allb,allw;
    allb = allw = true;
    for (int i = 0;i < n;i++)
    {
        if (can[i][m][0] == 0)
            allw = false;
        if (can[i][m][1] == 0)
            allb = false;
    }

    long long res = 0;

    for (int i = 0;i <= m;i++)
    {
        dp[0][i][0] = can[0][i][0];
        dp[0][i][1] = can[0][i][1];
    }

    for (int i = 1;i < n;i++)
    {
        sum[0][0] = dp[i-1][0][0];
        sum[0][1] = dp[i-1][0][1];
        for (int j = 1;j <= m;j++)
        {
            sum[j][0] = (sum[j-1][0]+dp[i-1][j][0])%mod;
            sum[j][1] = (sum[j-1][1]+dp[i-1][j][1])%mod;
        }

        for (int j = 0;j <= m;j++)
        {
            dp[i][j][0] = can[i][j][0]*sum[j][0];
            dp[i][j][1] = can[i][j][1]*sum[j][1];
        }
    }
    for (int i = 0;i <= m;i++)
        res = (res+dp[n-1][i][0]+dp[n-1][i][1])%mod;

    res = (res-allb-allw+mod)%mod;

    for (int i = 0;i <= m;i++)
    {
        dp[0][i][0] = can[0][i][0];
        dp[0][i][1] = can[0][i][1];
    }

    for (int i = 1;i < n;i++)
    {
        sum[m][0] = dp[i-1][m][0];
        sum[m][1] = dp[i-1][m][1];
        for (int j = m-1;j >= 0;j--)
        {
            sum[j][0] = (sum[j+1][0]+dp[i-1][j][0])%mod;
            sum[j][1] = (sum[j+1][1]+dp[i-1][j][1])%mod;
        }

        for (int j = 0;j <= m;j++)
        {
            dp[i][j][0] = can[i][j][0]*sum[j][0];
            dp[i][j][1] = can[i][j][1]*sum[j][1];
        }
    }
    for (int i = 0;i <= m;i++)
        res = (res+dp[n-1][i][0]+dp[n-1][i][1])%mod;

    res = (res-allb-allw+mod)%mod;
    res = (res-allb-allw+mod)%mod;

    for (int i = 1;i < m;i++)
    {
        if (checkc(i,'B'))
            res = (res-1+mod)%mod;
        if (checkc(i,'W'))
            res = (res-1+mod)%mod;
    }

    for (int i = 1;i < n;i++)
    {
        if (checkr(i,'B'))
            res = (res-1+mod)%mod;
        if (checkr(i,'W'))
            res = (res-1+mod)%mod;
    }

    return res;
}

//Powered by [KawigiEdit] 2.0!
double test0() {
	string t0[] = {"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????",
"??????????????????????????????????????????????????"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 14;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test1() {
	string t0[] = {"???","???","???"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 7;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test2() {
	string t0[] = {"WWB",
 "WWW",
 "WWW",
 "WWW"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 1;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test3() {
	string t0[] = {"BBBBBB",
 "WWBBBB",
 "WBBBBB"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 0;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test4() {
	string t0[] = {"?BB?",
 "BBBB",
 "?BB?"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 5;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
double test5() {
	string t0[] = {"?WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
 "B?WWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
 "BB?WWWWWWWWWWWWWWWWWWWWWWWWWWWW",
 "BBB?WWWWWWWWWWWWWWWWWWWWWWWWWWW",
 "BBBB?WWWWWWWWWWWWWWWWWWWWWWWWWW",
 "BBBBB?WWWWWWWWWWWWWWWWWWWWWWWWW",
 "BBBBBB?WWWWWWWWWWWWWWWWWWWWWWWW",
 "BBBBBBB?WWWWWWWWWWWWWWWWWWWWWWW",
 "BBBBBBBB?WWWWWWWWWWWWWWWWWWWWWW",
 "BBBBBBBBB?WWWWWWWWWWWWWWWWWWWWW",
 "BBBBBBBBBB?WWWWWWWWWWWWWWWWWWWW",
 "BBBBBBBBBBB?WWWWWWWWWWWWWWWWWWW",
 "BBBBBBBBBBBB?WWWWWWWWWWWWWWWWWW",
 "BBBBBBBBBBBBB?WWWWWWWWWWWWWWWWW",
 "BBBBBBBBBBBBBB?WWWWWWWWWWWWWWWW",
 "BBBBBBBBBBBBBBB?WWWWWWWWWWWWWWW",
 "BBBBBBBBBBBBBBBB?WWWWWWWWWWWWWW",
 "BBBBBBBBBBBBBBBBB?WWWWWWWWWWWWW",
 "BBBBBBBBBBBBBBBBBB?WWWWWWWWWWWW",
 "BBBBBBBBBBBBBBBBBBB?WWWWWWWWWWW",
 "BBBBBBBBBBBBBBBBBBBB?WWWWWWWWWW",
 "BBBBBBBBBBBBBBBBBBBBB?WWWWWWWWW",
 "BBBBBBBBBBBBBBBBBBBBBB?WWWWWWWW",
 "BBBBBBBBBBBBBBBBBBBBBBB?WWWWWWW",
 "BBBBBBBBBBBBBBBBBBBBBBBB?WWWWWW",
 "BBBBBBBBBBBBBBBBBBBBBBBBB?WWWWW",
 "BBBBBBBBBBBBBBBBBBBBBBBBBB?WWWW",
 "BBBBBBBBBBBBBBBBBBBBBBBBBBB?WWW",
 "BBBBBBBBBBBBBBBBBBBBBBBBBBBB?WW",
 "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB?W"};
	vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
	TwoConvexShapes * obj = new TwoConvexShapes();
	clock_t start = clock();
	int my_answer = obj->countWays(p0);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p1 = 73741817;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p1 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p1 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}
int main() {
	int time;
	bool errors = false;

	time = test0();
	if (time < 0)
		errors = true;

	time = test1();
	if (time < 0)
		errors = true;

	time = test2();
	if (time < 0)
		errors = true;

	time = test3();
	if (time < 0)
		errors = true;

	time = test4();
	if (time < 0)
		errors = true;

	time = test5();
	if (time < 0)
		errors = true;

	if (!errors)
		cout <<"You're a stud (at least on the example cases)!" <<endl;
	else
		cout <<"Some of the test cases had errors." <<endl;
}
